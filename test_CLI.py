import time
import psutil
import csv
import os
from openpyxl import Workbook
from datetime import datetime

def get_pid():
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ PID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå C:\\temp\\training_pid.txt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MATLAB ‡∏Å‡πà‡∏≠‡∏ô
    - ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™ Python ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå .py
    """
    # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MATLAB ‡∏Å‡πà‡∏≠‡∏ô ---
    pid_file_path = "C:\\temp\\training_pid.txt"
    try:
        if os.path.exists(pid_file_path):
            with open(pid_file_path, "r") as f:
                pid = int(f.read().strip())
            proc = psutil.Process(pid)
            if proc.is_running() and "matlab" in proc.name().lower():
                return pid, f"MATLAB (PID: {pid}) CMD: {' '.join(proc.cmdline())}"
    except (FileNotFoundError, psutil.NoSuchProcess, ValueError, psutil.AccessDenied):
        pass # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤ Python

    # --- ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MATLAB ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python ---
    current_pid = psutil.Process().pid
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.pid == current_pid:
                continue

            name = proc.info['name'].lower()
            cmdline_list = proc.info.get('cmdline')
            cmdline = ' '.join(cmdline_list or []).lower()
            
            if ("python" in name or "python.exe" in name) and ".py" in cmdline:
                return proc.pid, f"Python: {cmdline}"
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
            
    return None, None

def get_update_interval(elapsed):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Buffered ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ"""
    if elapsed < 10: return 10
    elif elapsed <= 60: return 5
    elif elapsed <= 300: return 10
    elif elapsed <= 900: return 20
    elif elapsed <= 3600: return 30
    else: return 60

def monitor(samrate, display_mode):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CPU/RAM
    """
    print("üîç Waiting for training process...")
    pid_file_path = "C:\\temp\\training_pid.txt"
    
    while True:
        pid, source = get_pid()
        if pid:
            break
        time.sleep(1)

    print(f"\n‚úÖ Detected training from: {source}")
    print(f"{'Time':<10} {'CPU (%)':<10} {'RAM (MB)':<12} Source")

    training_start = time.time()
    last_display_time = training_start
    data, buffer, samples = [], [], []
    is_matlab = "matlab" in source.lower()

    while True:
        # --- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î Monitor ---
        # 1. (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MATLAB) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå PID ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
        if is_matlab and not os.path.exists(pid_file_path):
           # print("\n‚ÑπÔ∏è MATLAB PID file deleted. Task is complete.")                  ‡∏•‡∏ö‡πÑ‡∏î‡πâ  --------------------------#
            break

        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Python ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏ì‡∏µ MATLAB ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        if not psutil.pid_exists(pid):
            print("\n‚ÑπÔ∏è Process PID not found. Stopping.")
            break
        
        # --- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CPU/RAM ---
        try:
            proc = psutil.Process(pid)
            proc.cpu_percent(interval=None) # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            time.sleep(0.1)
            cpu = proc.cpu_percent(interval=None) / psutil.cpu_count()
            ram = proc.memory_info().rss / (1024 * 1024)
        except psutil.NoSuchProcess:
            break # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏´‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

        # --- ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
        samples.append((cpu, ram))
        if (len(samples) * 0.1) >= samrate:
            avg_cpu = sum(x[0] for x in samples) / len(samples) if samples else 0
            avg_ram = sum(x[1] for x in samples) / len(samples) if samples else 0
            samples.clear()
            timestamp = datetime.now().strftime("%H:%M:%S")
            row = (timestamp, avg_cpu, avg_ram, source)

            if display_mode == 1:
                print(f"{timestamp:<10} {avg_cpu:<10.2f} {avg_ram:<12.2f} {source}")
                data.append(row)
            else:
                buffer.append(row)
                if time.time() - last_display_time >= get_update_interval(time.time() - training_start):
                    for b in buffer:
                        print(f"{b[0]:<10} {b[1]:<10.2f} {b[2]:<12.2f} {b[3]}")
                    data.extend(buffer)
                    buffer.clear()
                    last_display_time = time.time()

    if display_mode == 2 and buffer:
        for b in buffer:
            print(f"{b[0]:<10} {b[1]:<10.2f} {b[2]:<12.2f} {b[3]}")
        data.extend(buffer)

    print("\n‚èπÔ∏è Training stopped.")
    return data, source

def export_excel(data, source):
    """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel"""
    wb = Workbook()
    ws = wb.active
    ws.title = "Monitoring_Log"
    ws.append(["Time", "CPU (%)", "RAM (MB)", "Source"])
    for row in data:
        ws.append(row)
    ws.append([])
    ws.append(["Command/Source:", source])
    filename = f"monitor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    try:
        wb.save(filename)
        print(f"üìÅ Saved Excel to {os.path.abspath(filename)}")
    except Exception as e:
        print(f"‚ùå Error saving Excel file: {e}")


def export_csv(data, source):
    """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV"""
    filename = f"monitor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    try:
        with open(filename, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(["Time", "CPU (%)", "RAM (MB)", "Source"])
            writer.writerows(data)
            writer.writerow([])
            writer.writerow(["Command/Source:", source])
        print(f"üìÅ Saved CSV to {os.path.abspath(filename)}")
    except Exception as e:
        print(f"‚ùå Error saving CSV file: {e}")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    while True: # Loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "Restart from beginning"
        # --- 1. ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Sampling Rate ---
        while True:
            try:
                s_input = input("‚è±Ô∏è Set sampling rate (0.1‚Äì10.0) sec (recommended: 1.0): ")
                s = float(s_input)
                if 0.1 <= s <= 10.0: break
                else: print("‚ùå Invalid range. Try again.")
            except ValueError:
                print("‚ùå Invalid input. Try again.")

        # --- 2. Loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Display Mode ‡πÅ‡∏•‡∏∞ Action ---
        display_mode_loop = True
        while display_mode_loop:
            print("\nüì∫ Select display mode:")
            print("1. Real-time display")
            print("2. Buffered display")
            print("3. Back to sampling rate")
            m = input("Choice: ").strip()

            if m == '3':
                display_mode_loop = False # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡∏≤‡∏° sampling rate
                continue

            if m in ['1', '2']:
                mode = int(m)
                # --- [‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏°‡πà] ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö ---
                while True:
                    print("\n‚ñ∂Ô∏è Select action:")
                    print("1. Wait for training detection")
                    print("2. Back to display mode selection")
                    action = input("Choice: ").strip()

                    if action == '2':
                        break # ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Select display mode

                    if action == '1':
                        # --- ‡πÄ‡∏£‡∏¥‡πà‡∏° Monitor ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
                        records, source = monitor(s, mode)
                        
                        # --- ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏Å‡∏≤‡∏£ Monitor ---
                        while True:
                            print("\n‚úÖ Monitoring finished. What next?")
                            print("1. Wait for new training")
                            print("2. Export to Excel")
                            print("3. Export to CSV")
                            print("4. Restart from beginning")
                            print("5. Exit")
                            post = input("Choice: ").strip()

                            if post == '1':
                                print("\n" + "-"*40 + "\n")
                                # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏±‡∏ô monitor ‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ s ‡πÅ‡∏•‡∏∞ mode ‡πÄ‡∏î‡∏¥‡∏°
                                records, source = monitor(s, mode)
                                continue
                            elif post == '2':
                                export_excel(records, source)
                            elif post == '3':
                                export_csv(records, source)
                            elif post == '4':
                                # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å Loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                display_mode_loop = False
                                break
                            elif post == '5':
                                print("üëã Exiting...")
                                return
                            else:
                                print("‚ùå Invalid choice.")
                        
                        if not display_mode_loop:
                            break # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å action loop ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å restart
                    else:
                        print("‚ùå Invalid choice.")
                
                if not display_mode_loop:
                    break # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å display mode loop ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å restart

            else:
                print("‚ùå Invalid choice.")
        
        print("\n" + "="*40 + "\n") # ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Restart
if __name__ == "__main__":
    main()